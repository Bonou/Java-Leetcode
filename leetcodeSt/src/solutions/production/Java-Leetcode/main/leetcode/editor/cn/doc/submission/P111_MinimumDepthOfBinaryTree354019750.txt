/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        Queue<TreeNode> que = new LinkedList<>();
        if (root == null){
            return 0;
        }
        que.offer(root);
        int minDepth = 0;
        while (!que.isEmpty())
        {
            int len = que.size();
            minDepth++;
            while (len > 0)
            {
                TreeNode node = que.poll();
                if (node.left != null){
                    que.offer(node.left);
                }
                if (node.right != null){
                    que.offer(node.right);
                }

                //如果当前节点的左右孩子都为空，返回最小深度
                if(node.left == null && node.right == null){
                    return minDepth;
                }
                len--;
            }
        }
        return minDepth;

    }
}

//runtime:1 ms
//memory:60.4 MB
